name: Build, Test, and Deploy Laravel App

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress
      - name: Prepare Environment
        run: |
          cp .env.example .env
          php artisan key:generate
      - name: Run unit tests
        run: ./vendor/bin/phpunit

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/php@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Set image name
        run: echo "IMAGE_NAME=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run Trivy vulnerability scanner on Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  deploy_test:
    needs: build_and_test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig && chmod 600 kubeconfig
      - name: Deploy to Test Environment
        run: |
          microk8s kubectl --kubeconfig=kubeconfig -n test apply -k k8s/overlays/test
          microk8s kubectl --kubeconfig=kubeconfig -n test set image deployment/laravel-app laravel-app=${{ env.IMAGE_NAME }}:${{ github.sha }}
          microk8s kubectl --kubeconfig=kubeconfig -n test delete job laravel-migration --ignore-not-found
          microk8s kubectl --kubeconfig=kubeconfig -n test set image -f k8s/base/migration-job.yaml laravel-migration=${{ env.IMAGE_NAME }}:${{ github.sha }} | microk8s kubectl --kubeconfig=kubeconfig -n test apply -f -
          microk8s kubectl --kubeconfig=kubeconfig -n test wait --for=condition=complete job/laravel-migration --timeout=2m

  deploy_staging:
    needs: build_and_test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig && chmod 600 kubeconfig
      - name: Deploy to Staging Environment
        run: |
          microk8s kubectl --kubeconfig=kubeconfig -n staging apply -k k8s/overlays/staging
          microk8s kubectl --kubeconfig=kubeconfig -n staging set image deployment/laravel-app laravel-app=${{ env.IMAGE_NAME }}:${{ github.sha }}
          microk8s kubectl --kubeconfig=kubeconfig -n staging delete job laravel-migration --ignore-not-found
          microk8s kubectl --kubeconfig=kubeconfig -n staging set image -f k8s/base/migration-job.yaml laravel-migration=${{ env.IMAGE_NAME }}:${{ github.sha }} | microk8s kubectl --kubeconfig=kubeconfig -n staging apply -f -
          microk8s kubectl --kubeconfig=kubeconfig -n staging wait --for=condition=complete job/laravel-migration --timeout=2m

  deploy_production:
    needs: build_and_test
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig && chmod 600 kubeconfig
      - name: Deploy to Production Environment
        run: |
          microk8s kubectl --kubeconfig=kubeconfig -n production apply -k k8s/overlays/production
          microk8s kubectl --kubeconfig=kubeconfig -n production set image deployment/laravel-app larvel-app=${{ env.IMAGE_NAME }}:${{ github.sha }}
          microk8s kubectl --kubeconfig=kubeconfig -n production delete job laravel-migration --ignore-not-found
          microk8s kubectl --kubeconfig=kubeconfig -n production set image -f k8s/base/migration-job.yaml laravel-migration=${{ env.IMAGE_NAME }}:${{ github.sha }} | microk8s kubectl --kubeconfig=kubeconfig -n production apply -f -
          microk8s kubectl --kubeconfig=kubeconfig -n production wait --for=condition=complete job/laravel-migration --timeout=2m